#include <stdio.h>
#include "pico/stdlib.h"
#include "constants.h"
#include "lcd.h"
#include "graphism.h"
#include "characters_c64.h"
#include "bsp/board.h"
#include "tusb.h"

//--------------------------------------------------------------------+
// MACRO CONSTANT TYPEDEF PROTYPES
//--------------------------------------------------------------------+

// Interface index depends on the order in configuration descriptor
enum
{
    ITF_KEYBOARD = 0,
    ITF_MOUSE = 1
};

/* Blink pattern
 * - 250 ms  : device not mounted
 * - 1000 ms : device mounted
 * - 2500 ms : device is suspended
 */
enum
{
    BLINK_NOT_MOUNTED = 250,
    BLINK_MOUNTED = 1000,
    BLINK_SUSPENDED = 2500,
};

static uint32_t blink_interval_ms = BLINK_NOT_MOUNTED;

void led_blinking_task(void);
void hid_task(void);

int main()
{
    stdio_init_all();
    sleep_ms(2000);
    init_pico();
    lcd_init();
    uint8_t tmps[4] = {0};
    printf("A_0001\n");
    lcd_read_info(CMD_READ_ID4, 3, 1, tmps);
    printf("IC Version           : %x\n", tmps[0]);
    printf("IC model name part 1 : %x\n", tmps[1]);
    printf("IC model name part 2 : %x\n", tmps[2]);
    lcd_read_info(CMD_READ_DISPLAY_BRIGHTNESS, 2, 0, tmps);
    printf("Brightness           : %x\n", tmps[0]);
    printf("Brightness           : %x\n", tmps[1]);
    lcd_read_info(CMD_READ_SELF_DIAG, 1, 1, tmps);
    printf("Self diag            : %x\n", tmps[0]);
    sleep_ms(1000);
    printf(" Test RGB\n");

    //clear_screen(GREEN);
    for (uint16_t y = 0; y < HEIGHT; y++)
    {
        for (uint16_t x = 0; x < WIDTH; x++)
        {
            pset(x, y, y % 255, x, 255 - (y % 255));
        }
    }
    graph_line(0, 0, WIDTH, HEIGHT, BLACK);
    graph_line(WIDTH, 0, 0, HEIGHT, WHITE);
    graph_circle(WIDTH / 2, HEIGHT / 2, WIDTH / 2, WHITE);
    uint16_t posy = 0;
    uint16_t posx = 0;
    for (int i = 0; i < 224; i++)
    {
        posx = (i * CHAR_WIDTH) % WIDTH;
        posy = ((i * CHAR_WIDTH) / WIDTH) * CHAR_HEIGHT;
        draw_char(i + 32, posx, posy, WHITE);
    }
    int c = 0;
    board_init();
    tusb_init();
    while (1)
    {
        tud_task(); // tinyusb device task
        led_blinking_task();
        hid_task();
    }
    return 0;
}

//--------------------------------------------------------------------+
// Device callbacks
//--------------------------------------------------------------------+

// Invoked when device is mounted
void tud_mount_cb(void)
{
    blink_interval_ms = BLINK_MOUNTED;
    printf("tud_mount_cb");
}

// Invoked when device is unmounted
void tud_umount_cb(void)
{
    blink_interval_ms = BLINK_NOT_MOUNTED;
    printf("tud_umount_cb");
}

// Invoked when usb bus is suspended
// remote_wakeup_en : if host allow us  to perform remote wakeup
// Within 7ms, device must draw an average of current less than 2.5 mA from bus
void tud_suspend_cb(bool remote_wakeup_en)
{
    (void)remote_wakeup_en;
    blink_interval_ms = BLINK_SUSPENDED;
    printf("tud_suspend_cb");
}

// Invoked when usb bus is resumed
void tud_resume_cb(void)
{
    blink_interval_ms = BLINK_MOUNTED;
    printf("tud_resume_cb");
}

//--------------------------------------------------------------------+
// USB HID
//--------------------------------------------------------------------+

void hid_task(void)
{
    // Poll every 10ms
    const uint32_t interval_ms = 10;
    static uint32_t start_ms = 0;

    if (board_millis() - start_ms < interval_ms)
        return; // not enough time
    start_ms += interval_ms;

    uint32_t const btn = board_button_read();

    // Remote wakeup
    if (tud_suspended() && btn)
    {
        // Wake up host if we are in suspend mode
        // and REMOTE_WAKEUP feature is enabled by host
        tud_remote_wakeup();
    }

    /*------------- Keyboard -------------*/
    if (tud_hid_n_ready(ITF_KEYBOARD))
    {
        // use to avoid send multiple consecutive zero report for keyboard
        static bool has_key = false;

        if (btn)
        {
            uint8_t keycode[6] = {0};
            keycode[0] = HID_KEY_A;

            tud_hid_n_keyboard_report(ITF_KEYBOARD, 0, 0, keycode);

            has_key = true;
        }
        else
        {
            // send empty key report if previously has key pressed
            if (has_key)
                tud_hid_n_keyboard_report(ITF_KEYBOARD, 0, 0, NULL);
            has_key = false;
        }
    }

    /*------------- Mouse -------------*/
    if (tud_hid_n_ready(ITF_MOUSE))
    {
        if (btn)
        {
            int8_t const delta = 5;

            // no button, right + down, no scroll pan
            tud_hid_n_mouse_report(ITF_MOUSE, 0, 0x00, delta, delta, 0, 0);
        }
    }
}

// Invoked when received GET_REPORT control request
// Application must fill buffer report's content and return its length.
// Return zero will cause the stack to STALL request
uint16_t tud_hid_get_report_cb(uint8_t itf, uint8_t report_id, hid_report_type_t report_type, uint8_t *buffer, uint16_t reqlen)
{
    // TODO not Implemented
    (void)itf;
    (void)report_id;
    (void)report_type;
    (void)buffer;
    (void)reqlen;

    return 0;
}

// Invoked when received SET_REPORT control request or
// received data on OUT endpoint ( Report ID = 0, Type = 0 )
void tud_hid_set_report_cb(uint8_t itf, uint8_t report_id, hid_report_type_t report_type, uint8_t const *buffer, uint16_t bufsize)
{
    // TODO set LED based on CAPLOCK, NUMLOCK etc...
    (void)itf;
    (void)report_id;
    (void)report_type;
    (void)buffer;
    (void)bufsize;
}

//--------------------------------------------------------------------+
// BLINKING TASK
//--------------------------------------------------------------------+
void led_blinking_task(void)
{
    static uint32_t start_ms = 0;
    static bool led_state = false;

    // Blink every interval ms
    if (board_millis() - start_ms < blink_interval_ms)
        return; // not enough time
    start_ms += blink_interval_ms;

    board_led_write(led_state);
    led_state = 1 - led_state; // toggle
}